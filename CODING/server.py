import socket 
import threading
import hashlib
import hmac

SECRET_KEY = b'akfjbvhjhasfvbb'

def generate_hmac(message):
    h = hmac.new(SECRET_KEY, message.encode('utf-8'), hashlib.sha512)
    return h.digest()

def handle_client(client_socket):
    while True:
        data = client_socket.recv(1024)
        if not data:
            break

        # separating received data into message and hman
        received_hmac = data[:64]
        message = data[64:].decode('utf-8')

        
        expected_hmac = generate_hmac(message)
        if not hmac.compare_digest(received_hmac, expected_hmac):
            print("integrity check failed.")
            break

        print(f"client: {message}")
        user_input = input("enter your message: ")
        response = user_input

        # adding hmac to response before sending it
        response_hmac = generate_hmac(response)
        client_socket.sendall(response_hmac + response.encode('utf-8'))

    client_socket.close()

def main():
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    host = '127.0.0.1'
    port = 12345
    server_socket.bind((host, port))
    server_socket.listen(5)
    print(f"Server listening on {host}:{port}")

    while True:
        client_socket, client_address = server_socket.accept()
        print(f"Accepted connection from {client_address}")
        client_handler = threading.Thread(target=handle_client, args=(client_socket,))
        client_handler.start()

if __name__ == "__main__":
    main()
