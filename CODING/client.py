import socket 
import threading
import hashlib
import hmac

SECRET_KEY = b'akfjbvhjhasfvbb'

def generate_hmac(message):
    h = hmac.new(SECRET_KEY, message.encode('utf-8'), hashlib.sha512)
    return h.digest()

def main():
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    host = '127.0.0.1'
    port = 12345
    client_socket.connect((host, port))

    while True:
        message = input("Enter your message: ")

        message_hmac = generate_hmac(message)
        message_to_send = message_hmac + message.encode('utf-8')
        client_socket.sendall(message_to_send)

        data = client_socket.recv(1024)

        received_hmac = data[:64]
        response = data[64:].decode('utf-8')

        expected_hmac = generate_hmac(response)
        if not hmac.compare_digest(received_hmac, expected_hmac):
            print("Integrity check failed. Response may have been tampered.")
            break

        print(f"Server response: {response}")

if __name__ == "__main__":
    main()
